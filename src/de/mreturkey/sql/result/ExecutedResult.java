package de.mreturkey.sql.result;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import de.mreturkey.sql.query.Query;
import de.mreturkey.sql.query.QueryType;

public class ExecutedResult implements Result {

	private final ResultSet resultSet;
	private final Query query;
	private Object[][] values = null;
	
	/**
	 * A instance of data representing a database result, which is generated by executing a statement that queries the database.
	 * @param resultSet - cannot be null
	 * @param query - a null as query means that this Result was executed without using the Query API
	 */
	public ExecutedResult(ResultSet resultSet, Query query) {
		this.resultSet = resultSet;
		this.query = query;
	}

	@Override
	public final boolean isCached() {
		return false;
	}

	@Override
	public QueryType getQueryType() {
		return query.getType();
	}

	@Override
	public ResultSet getResultSet() {
		return resultSet;
	}

	@Override
	public Query getExecutedQuery() {
		return query;
	}

	@Override
	public Object[][] getValues() throws SQLException {
		if(this.values != null) return this.values;
		ArrayList<Object[]> vals = new ArrayList<>();
		int columnCount = resultSet.getMetaData().getColumnCount();
		int row = -1;
		while(resultSet.next()) {
			row++;
			Object[] tmp = new Object[columnCount];
			for (int i = 0; i < columnCount; i++) {
				tmp[i] = resultSet.getObject((i +1));
			}
			vals.add(tmp);
		}
		
		Object[][] theVals ={};
		int b = 0;
		for(Object[] o : vals) {
			for(Object t : o) {
				
			}
		}
		
		if(row == -1) return null;
		this.values = (Object[][]) vals.toArray();
		return this.values;
	}
	
}
